
#ACLOCAL_AMFLAGS = -I $(top_srcdir)/m4


#AM_CPPFLAGS = \
#	-include $(top_srcdir)/plugin-source/config.h \
#	@CORE_CPPFLAGS@ \
#	-I$(top_srcdir)/plugin-source/common/

#AM_CFLAGS = \
#	@CORE_CFLAGS@

#AM_OBJCFLAGS = \
#	@CORE_OBJCFLAGS@


noinst_PROGRAMS = \
	dnssec-plug \
	dane-plug


dnssec_plug_SOURCES = \
	$(DNSSEC_CORE_SRCS) \
	$(top_srcdir)/plugin-source/DNSSECValidatorPlugin/dnssec-main.c

#dnssec_plug_LDADD = \
#	$(top_srcdir)/core_js-ctypes/.libs/libDNSSECcore.a

dnssec_plug_LDFLAGS = \
	@CORE_LDFLAGS@

dnssec_plug_LDADD = \
	@CORE_LIBS@

if STATIC_CORE
if MINGW_BUILD
# Libtool refuses to link static archives into dynamic libraries, therefore
# the explicit linking.
# libldns contains inet_pton() and inet_ntop(), therefore it is laways linked.
dnssec_plug_LDADD += \
	$(LDNS_STATIC_DEP)
endif

# The order of libraries does matter.
dnssec_plug_LDADD += \
	$(DNSSEC_CORE_STATIC_DEPS) \
	@CORE_LIBS@
endif

if MINGW_BUILD
dnssec_plug_LDADD += \
	-lws2_32 -liphlpapi -lgdi32
endif


dane_plug_SOURCES = \
	$(DANE_CORE_SRCS) \
	$(top_srcdir)/plugin-source/TLSAValidatorPlugin/dane-main.c

#dane_plug_LDADD = \
#	$(top_srcdir)/core_js-ctypes/.libs/libDANEcore.a

dane_plug_LDFLAGS = \
	@CORE_LDFLAGS@

dane_plug_LDADD = \
	@CORE_LIBS@

if STATIC_CORE
# The order of libraries does matter.
dane_plug_LDADD += \
	$(DANE_CORE_STATIC_DEPS) \
	@CORE_LIBS@
endif

if MINGW_BUILD
dane_plug_LDADD += \
	-lws2_32 -liphlpapi -lgdi32 -lcrypt32
endif
